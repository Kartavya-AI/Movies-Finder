"use strict";
/**
 * 全局错误处理工具
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiError = void 0;
exports.formatErrorMessage = formatErrorMessage;
exports.registerGlobalErrorHandlers = registerGlobalErrorHandlers;
/**
 * API错误类
 */
class ApiError extends Error {
    constructor(message, statusCode = 500) {
        super(message);
        this.name = 'ApiError';
        this.statusCode = statusCode;
    }
}
exports.ApiError = ApiError;
/**
 * 格式化错误为用户友好的消息
 */
function formatErrorMessage(error) {
    if (error instanceof ApiError) {
        return `错误 (${error.statusCode}): ${error.message}`;
    }
    else if (error instanceof Error) {
        return `错误: ${error.message}`;
    }
    else {
        return '发生未知错误';
    }
}
/**
 * 注册全局错误处理器
 */
function registerGlobalErrorHandlers() {
    process.on('uncaughtException', (error) => {
        console.error('未捕获的异常:', error);
    });
    process.on('unhandledRejection', (reason, promise) => {
        console.error('未处理的Promise拒绝:', reason);
    });
}
